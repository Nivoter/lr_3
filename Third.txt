 
  File   main.c
  Author Alexander Kuznetsov
 
  Created on 7 oaaaey 2018 a., 1641
 

 PIC18F4525 Configuration Bit Settings

 'C' source line config statements

 CONFIG1H
#pragma config OSC = HS       Oscillator Selection bits (HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1))
#pragma config FCMEN = OFF       Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF        InternalExternal Oscillator Switchover bit (Oscillator Switchover mode disabled)

 CONFIG2L
#pragma config PWRT = OFF        Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON        Brown-out Reset Enable bits (Brown-out Reset enabled and controlled by software (SBOREN is enabled))
#pragma config BORV = 3          Brown Out Reset Voltage bits (Minimum setting)

 CONFIG2H
#pragma config WDT = OFF         Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768     Watchdog Timer Postscale Select bits (132768)

 CONFIG3H
#pragma config CCP2MX = PORTC    CCP2 MUX bit (CCP2 inputoutput is multiplexed with RC1)
#pragma config PBADEN = OFF      PORTB AD Enable bit (PORTB40 pins are configured as digital IO on Reset)
#pragma config LPT1OSC = OFF     Low-Power Timer1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = ON        MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

 CONFIG4L
#pragma config STVREN = ON       Stack FullUnderflow Reset Enable bit (Stack fullunderflow will cause Reset)
#pragma config LVP = OFF         Single-Supply ICSP Enable bit (Single-Supply ICSP disabled)
#pragma config XINST = OFF       Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

 CONFIG5L
#pragma config CP0 = OFF         Code Protection bit (Block 0 (000800-003FFFh) not code-protected)
#pragma config CP1 = OFF         Code Protection bit (Block 1 (004000-007FFFh) not code-protected)
#pragma config CP2 = OFF         Code Protection bit (Block 2 (008000-00BFFFh) not code-protected)

 CONFIG5H
#pragma config CPB = OFF         Boot Block Code Protection bit (Boot block (000000-0007FFh) not code-protected)
#pragma config CPD = OFF         Data EEPROM Code Protection bit (Data EEPROM not code-protected)

 CONFIG6L
#pragma config WRT0 = OFF        Write Protection bit (Block 0 (000800-003FFFh) not write-protected)
#pragma config WRT1 = OFF        Write Protection bit (Block 1 (004000-007FFFh) not write-protected)
#pragma config WRT2 = OFF        Write Protection bit (Block 2 (008000-00BFFFh) not write-protected)

 CONFIG6H
#pragma config WRTC = OFF        Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF        Boot Block Write Protection bit (Boot Block (000000-0007FFh) not write-protected)
#pragma config WRTD = OFF        Data EEPROM Write Protection bit (Data EEPROM not write-protected)

 CONFIG7L
#pragma config EBTR0 = OFF       Table Read Protection bit (Block 0 (000800-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF       Table Read Protection bit (Block 1 (004000-007FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF       Table Read Protection bit (Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks)

 CONFIG7H
#pragma config EBTRB = OFF       Boot Block Table Read Protection bit (Boot Block (000000-0007FFh) not protected from table reads executed in other blocks)

 #pragma config statements should precede project file includes.
 Use project enums instead of #define for ON and OFF.
#define _XTAL_FREQ 10000000


#include xc.h
#include stdio.h
#include stdlib.h
#define lcd_clear() lcd_command(1)
#define lcd_origin() lcd_command(2)
#ifndef _XTAL_FREQ
#define _XTAL_FREQ 40000000  iiaaaeaiea oaeoiaie anoiou  40 IAo  aey ooieoee __delay_ms
#endif
#define E_pulse_with 50 aeeoaeuiinou oaeoiauo eiioeunia LCD a ien
#define LCD_E PORTDbits.RD3
#define LCD_RS PORTDbits.RD2
#define LCD_Data4 LATD  eieoeaeecaoey iioia D4-D7 LCD
void lcd_clk(void) aaiaaoey eiioeuna ia aoia EN
{
  LCD_E = 1;
  __delay_us(E_pulse_with);
  LCD_E = 0;
  __delay_us(E_pulse_with);
}
void lcd_command(unsigned char outbyte) ioiaaeou eiiaiao (4-aeoiue a-ei aaiou) 
{
  LCD_RS=0; aei iaaaae eiiaiau
  LCD_Data4=(LCD_Data4&0x0f)(outbyte&0xf0);  ioiaaea noaoeo aouao aeo
  lcd_clk();
  LCD_Data4=(LCD_Data4&0x0f)((outbyte4)&0xf0);  ioiaaea ieaaoeo a-ouao aeo
  lcd_clk();
  __delay_ms(1);
}
void lcd_putc(char outbyte)  ioiaaeou aaiiua (4-aeoiay iiaaoey) 
{
  LCD_RS=1; aei iaaaae aaiiuo
  LCD_Data4=(LCD_Data4&0x0f)(outbyte&0xf0);
  lcd_clk();
  LCD_Data4=(LCD_Data4&0x0f)((outbyte4)&0xf0);
  lcd_clk();
}
void lcd_puts(unsigned char line,const char p)  auaia noiee ia yeai
{
	lcd_origin();          iaaoia e ioeaaiio aaano LCD
	lcd_command(line);			 onoaiiaeou aaan LCD 00H
	while(p)                   iiaaeou, aaai ee oeacaoaeu 0
	{
	 lcd_putc(p);              ioiaaeou aaiiua ia LCD
	 p++;                       oaaeeeou aaan ia 1
	}
}
void inttolcd(unsigned char posi, long value) auaia ia yeai ciaaiee iaa-iaiiuo
{
	char buff[16];
	itoa(buff,value,10);
	lcd_puts(posi,buff);
}
void lcd_init()  eieoeaeecaoey LCD-aenieay
{
  TRISD &= 0x03; iaaaia auaiaia RD4-RD7a aei auoiaia
  LCD_Data4 &= 0b00001111;onoaiiaea ioeae ia eeiee iaaaae aaiiuo
  LCD_E=0;
  LCD_RS=0;
  __delay_ms(1);
eieoeaeecaoey aenieay
  LCD_Data4=(LCD_Data4&0x0f)0x30;
  lcd_clk();
 __delay_ms(1);
  LCD_Data4=(LCD_Data4&0x0f)0x30;
 lcd_clk();
__delay_ms(1);
  LCD_Data4=(LCD_Data4&0x0f)0x30;
  lcd_clk();
  __delay_ms(1);
---------------------------------
  LCD_Data4=(LCD_Data4&0x0f)0x20;	 iaaeeeou ia 4-aeoiue aei ia-a-aae
  lcd_clk();
  __delay_ms(1);
  lcd_command(0x28);onoaiiaeou N=1, F=0 (aaa noiee, acia neiaiea 58 oiae
  lcd_command(0x01);	 ienoeou an
  lcd_command(0x06);	 aaoiiaoeanee iaaaaeioou eoni iinea aaeoa
  lcd_command(0x0C);	 aenieae aeei, eonia iao, ia iiaaao
  lcd_command(0x02);	 iaaeuiay iiceoey
  lcd_command(0x01);	 ienoeou an niiaa
}
void Adc_init()
 {
 TRISA=0b11111111; ia?aaia auaiaia RA0, RA1, RA2, RA3, RA5 a ?a?ei aoiaia

 TRISE=0b00000111; ia?aaia auaiaia RE0, RE1, RE2 a ?a?ei aoiaia
 ADCON1bits.PCFG=0b0111;  eiioeao?aoey aiaeiai-oeo?iauo ii?oia
 ADCON1bits.VCFG=0b00;  iii?iia iai?y?aiea Vss Vdd
 ADCON2bits.ACQT=0b111; a?aiy i?aia?aciaaiey 20 Tad
 ADCON2bits.ADCS=0b110; ?anoioa i?aia?aciaaiey Fosc64 

 ADCON2bits.ADFM=0;eaaia niauaiea
 ADCON0bits.ADON=1;  iiaoeu AOI aee??ai
 }
int read_Adc()
 {
 ADCON0bits.CHS=7;  auai? aiaeiaiaiai eaiaea
 ADCON0bits.GO_DONE=1;  caione i?aia?aciaaiey
 while(ADCON0bits.GO_DONE==1);
 return (ADRESH2)+(ADRESL6);caienu ?acoeuoaoa i?aia?aciaaiey
 } 
int i=0;
void interrupt HIisr (void)
{
    
 if (INTCONbits.INT0IF)
 {
 __delay_ms(10); задержка для исключения влияния «дребезга» контак-

 __delay_ms(10);
 __delay_ms(10);
 if (PORTBbits.RB0==0)
 {
 LATBbits.LATB3=!LATBbits.LATB3;
 i++;
 
 }
 INTCONbits.INT0IF=0;
 }
}
void main(void) {
 TRISBbits.RB3=0;настройка RB3 на выход
 TRISBbits.RB0=1;настройка RB0 на вход
 RCONbits.IPEN=1;  разрешение двухуровневых прерываний
 INTCON2bits.INTEDG0=0; прерывание по ниспадающему фронту сигнала

 INTCONbits.INT0IF=0; обнуление флага прерывания от внешнего источ-

 INTCONbits.GIEH=1; разрешение высокоуровневых прерываний
 INTCONbits.INT0IE=1;разрешение прерывания от внешнего источника
 LATBbits.LATB3=1;
 while(1);
}void interrupt low_priority LIisr (void)
{
 if (INTCONbits.TMR0IF)
 {
 INTCONbits.TMR0IF=0;
 TMR0H=103;
 TMR0L=106;
 LATBbits.LATB3=!LATBbits.LATB3;
 }
}
int main(int argc, char argv) {

 lcd_init();
 Adc_init();
 TRISBbits.RB3=0;настройка RB3 на выход
 TRISBbits.RB0=1;настройка RB0 на вход
 RCONbits.IPEN=1;  разрешение двухуровневых прерываний
 INTCON2bits.INTEDG0=0; прерывание по ниспадающему фронту сигнала

 INTCONbits.INT0IF=0; обнуление флага прерывания от внешнего источ-

 INTCONbits.GIEH=1; разрешение высокоуровневых прерываний
 INTCONbits.INT0IE=1;разрешение прерывания от внешнего источника
 LATBbits.LATB3=1;
TRISBbits.RB3=0;настройка RB3 на выход
T0CONbits.T08BIT=0;настройка таймера №0 на 16-битный режим работы
T0CONbits.PSA=0;разрешение использовать предделитель
T0CONbits.T0PS=0b111;предделитель равен 256
T0CONbits.T0CS=0;выбор внутреннего источника тактовых импульсов
TMR0H=103;запись старшего байта начального значения
TMR0L=106;запись младшего байта начального значения 

T0CONbits.TMR0ON=1;
RCONbits.IPEN=1;  разрешение двухуровневых прерываний
INTCON2bits.TMR0IP=0;присвоение прерыванию низкого приоритета
INTCONbits.TMR0IF=0;обнуление флага прерывания по переполнению таймера 0
INTCONbits.GIEH=1; разрешение высокоуровневых прерываний
INTCONbits.GIEL=1; разрешение низкоуровневых прерываний
INTCONbits.TMR0IE=1;разрешение прерывания по переполнению таймера 0
while(1)
{
    lcd_puts(0x80,Sensor= );
    inttolcd(0x89,i);
};
 }



 